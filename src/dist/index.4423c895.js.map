{"mappings":"AAKAA,EAAEC,UAAUC,OAAM,KAChBC,IACAH,EAAE,gBAAgBI,GAAG,UAAWC,IAC9B,IAAIC,EAAcN,EAAE,gBAAgBO,MACpCC,EAAYF,GACZD,EAAEI,gBAAc,GAClB,IAIF,MASMC,EAAkBL,IACpB,MAAMM,EAAeX,EAAEK,EAAEO,QAAQC,QAAQ,aACnCC,EAAQH,EAAaI,KAAK,MAAMC,OAChCC,EAAKN,EAAaI,KAAK,MAAMC,OAC7BE,EAAaP,EAAaI,KAAK,OAAOI,KAAK,OAC3CC,EAAcT,EAAaI,KAAK,MAAMC,OAEtCK,EAAmBC,KAAKC,MAAMC,aAAaC,QAAQ,kBAAoB,GAE7E,GAAKJ,EAAiBN,MAAKW,GAAKA,EAAET,KAAOA,IAYrCU,MAAM,mCAZoC,CAC1C,MAAMC,EAAiB,C,GACnBX,E,MACAH,E,WACAI,E,YACAE,GAGJC,EAAiBQ,KAAKD,GACtBJ,aAAaM,QAAQ,eAAgBR,KAAKS,UAAUV,IACpDW,QAAQC,IAAIL,EAChB,CACU,EAKRpB,EAAc0B,MAAO5B,IACvB,IAEE,MAAM6B,OAtCOD,OAAO5B,IACtB,IACE,MAAO8B,MAAMD,QAAEA,UAAmBE,MAAMC,IAAsB,2GAAyBhC,gCACvF,OAAO6B,CAGT,CAFE,MAAOI,GACPP,QAAQC,IAAIM,EACd,GAgCwBC,CAAWlC,GACjC0B,QAAQC,IAAIE,GACZ,IAAIM,EAAgB,GACpBzC,EAAE0C,KAAKP,GAAS,CAACQ,GAAO1B,GAAEA,EAAEH,MAAEA,EAAK8B,YAAEA,EAAWC,aAAEA,MAChDJ,GAAiB,yIAGgCG,4BACvC9B,2BACA+B,kCACO5B,6JAId,IAGLjB,EAAE,mBAAmB8C,OAGvB9C,EAAE,WAAW+C,IAAI,QAAS,eAC1B/C,EAAE,WAAWI,GAAG,QAAS,eAAgBC,IACvCK,EAAeL,EAAA,IAGjBL,EAAE,WAAWgD,KAAKP,EAIlB,CAFA,MAAOF,GACLP,QAAQC,IAAIM,EACd,GAMEpC,EAAmB+B,UAClB,IACI,MAAMe,QAAiBZ,MAAMC,IAAI,6GACjCN,QAAQC,IAAIgB,EAASb,KAAKD,SAE1B,IAAIe,EAAiB,GAC1BlD,EAAE0C,KAAKO,EAASb,KAAKD,SAAS,CAACQ,GAAO1B,GAAEA,EAAEH,MAAEA,EAAK8B,YAAEA,EAAWC,aAAEA,MAC9DK,GAAkB,yIAG+BN,4BACvC9B,2BACA+B,kCACO5B,mIAId,IAGLjB,EAAE,mBAAmBmD,OAErBnD,EAAE,mBAAmBI,GAAG,QAAS,eAAgBC,IAC/CK,EAAeL,EAAA,IAGhBL,EAAE,mBAAmBgD,KAAKE,EAG1B,CAFE,MAAOX,GACLP,QAAQC,IAAIM,EAChB","sources":["src/js/axios.js"],"sourcesContent":["// import {API_KEY} from \"./../env.js\"\nimport {API_SEARCH_LINK} from \"../../env.js\"\nimport {API_POPULAR_LINK} from \"../../env.js\"\n\n//Search input logic//\n$(document).ready(() => {\n  getPopularMovies();\n  $(`#search-form`).on(`submit`, (e) => {\n    let searchInput = $(`#searchInput`).val();\n    searchMovie(searchInput);\n    e.preventDefault();\n  });\n});\n\n  //Metodo que invoca los datos en AXIOS mediante el Search Input \nconst obtainData = async (searchInput) => {\n    try {\n      const {data: { results }} = await axios.get(API_SEARCH_LINK + `&language=en-US&query=${searchInput}&page=1&include_adult=false`)\n      return results;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  \nconst addToWatchlist = (e) => {\n    const movieElement = $(e.target).closest(\".col-md-3\");\n    const title = movieElement.find(\"h4\").text();\n    const id = movieElement.find('h6').text();\n    const posterPath = movieElement.find(\"img\").attr(\"src\");\n    const releaseDate = movieElement.find(\"h5\").text();\n\n    const currentWatchlist = JSON.parse(localStorage.getItem('movieInWatch')) || [];\n\n    if (!currentWatchlist.find(m => m.id === id)) {\n        const movieWatchlist = {\n            id,\n            title,\n            posterPath,\n            releaseDate,\n        };\n\n        currentWatchlist.push(movieWatchlist);\n        localStorage.setItem('movieInWatch', JSON.stringify(currentWatchlist));\n        console.log(movieWatchlist);\n    } else {\n        alert('Movie already in watchlist!');\n    }\n}\n\n  //Renderizar las peliculas cuando se busquen\nconst searchMovie = async (searchInput) => {\n    try {\n      //Llama a el metodo ObtainData para obtener las diferentes peliculas \n      const results = await obtainData(searchInput);\n      console.log(results)\n      let displayMovies = [];\n      $.each(results, (index, { id, title, poster_path, release_date }) => {\n        displayMovies += `\n          <div class=\"col-md-3\"> \n          <div class=\"well text-center\">\n          <img src=\"https://image.tmdb.org/t/p/original${poster_path}\"></a>\n            <h4>${title}</h4>\n            <h5>${release_date}</h5>\n            <h6 hidden>${id}</h6>\n            <button class=\"btn btn-primary\" id = \"add-button\" type=\"button\">Add to watchlist</button>\n          </div>\n        </div>\n          `;\n      });\n\n      $('#popular-movies').hide();\n      \n    //Si le da click a un boton con el ID: Add-Boton que realice la funcion \n    $(\"#movies\").off(\"click\", \"#add-button\");\n    $(\"#movies\").on(\"click\", \"#add-button\", (e) => {\n      addToWatchlist(e)\n    });\n\n    $(\"#movies\").html(displayMovies)\n    } \n    catch (error) {\n      console.log(error);\n    }\n  };\n  \n\n\n  \nconst getPopularMovies = async() => {\n       try {\n           const response = await axios.get(API_POPULAR_LINK + `&language=en-US&page=1`)\n           console.log(response.data.results)\n\n           let displayPopular = [];\n      $.each(response.data.results, (index, { id, title, poster_path, release_date }) => {\n        displayPopular += `\n          <div class=\"col-md-3\"> \n          <div class=\"well text-center\">\n          <img src=\"https://image.tmdb.org/t/p/original${poster_path}\"></a>\n            <h4>${title}</h4>\n            <h5>${release_date}</h5>\n            <h6 hidden>${id}</h6>\n            <a class=\"btn btn-primary\" id=\"add-button\">Add to watchlist</a>\n          </div>\n        </div>\n          `;\n      });\n\n      $('#popular-movies').show();\n\n      $(\"#popular-movies\").on(\"click\", \"#add-button\", (e) => {\n        addToWatchlist(e)\n       })\n\n       $(\"#popular-movies\").html(displayPopular);\n       } catch (error) {\n           console.log(error)\n       }\n   }\n\n"],"names":["$","document","ready","$84fef9ec17870ebd$var$getPopularMovies","on","e","searchInput","val","$84fef9ec17870ebd$var$searchMovie","preventDefault","$84fef9ec17870ebd$var$addToWatchlist","movieElement","target","closest","title","find","text","id","posterPath","attr","releaseDate","currentWatchlist","JSON","parse","localStorage","getItem","m","alert","movieWatchlist","push","setItem","stringify","console","log","async","results","data","axios","get","error","$84fef9ec17870ebd$var$obtainData","displayMovies","each","index","poster_path","release_date","hide","off","html","response","displayPopular","show"],"version":3,"file":"index.4423c895.js.map"}